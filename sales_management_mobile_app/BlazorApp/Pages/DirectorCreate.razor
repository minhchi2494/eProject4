@page "/directorCreate"
@attribute [Authorize]
@using BlazorApp.Models
@using BlazorApp.Services
@using BlazorApp.Services.Request
@using System.IO
@inject NavigationManager NavigationManager;
@inject IDirectorServices _services;
@inject IToastService ToastService;
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReader;
<h3>Create Director</h3>

<EditForm Model="@model" OnValidSubmit="@SubmitCreate" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    @*<ValidationSummary />*@
    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Id">Id: <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.id"></InputText>
            <ValidationMessage For="()=>model.id"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Username">Username <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.username"></InputText>
            <ValidationMessage For="()=>model.username"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Password">Password <span style="color:red">(*)</span> </label>
            <InputText class="form-control" type="password" @bind-Value="model.password"></InputText>
            <ValidationMessage For="()=>model.password"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="ConfirmPassword">Confirm Password <span style="color:red">(*)</span> </label>
            <InputText class="form-control" type="password" @bind-Value="model.ConfirmPassword"></InputText>
            <ValidationMessage For="()=>model.ConfirmPassword"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Fullname">Fullname <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.fullname"></InputText>
            <ValidationMessage For="()=>model.fullname"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Email">Email <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.email"></InputText>
            <ValidationMessage For="()=>model.email"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>


    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Phone">Phone <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.phone"></InputText>
            <ValidationMessage For="()=>model.phone"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Address">Address </label>
            <InputText class="form-control" @bind-Value="model.address"></InputText>
            <ValidationMessage For="()=>model.address"></ValidationMessage>
        </div>

    </div>

    <div>
        <br>
    </div>

    <div class="row material">
         <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Avatar">Avatar <span style="color:red">(*)</span> </label>
            <br/>
            <input type="file" name="image" @ref="inputReference" @onchange="async() =>await OnInputFileChange()" />
            <ValidationMessage For="()=>model.file"></ValidationMessage>
        </div>

         <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="IsActive">Active</label><br />
            <input type="checkbox" unchecked @bind="model.isActive">
        </div>
    </div>

     <div>
        <br>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <a href="/account" class="btn btn-primary">Cancel</a>
</EditForm>

@code {
    private List<Director> directors = new List<Director>();

    private Director searchDirector = new Director();

    private DirectorRequest model = new DirectorRequest();

    ElementReference inputReference;

    string nameImage = string.Empty;

    Stream filestream = null;
    async Task OnInputFileChange()
    {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
        {
            return;
        }

        var fileInfo = await file.ReadFileInfoAsync();
        nameImage = fileInfo.Name;
        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            filestream = new MemoryStream(ms.ToArray());
        }
    }

    private async Task SubmitCreate(EditContext context)
    {
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(filestream, (int)filestream.Length), "file", nameImage);
        content.Add(new StringContent(model.id), "id");
        content.Add(new StringContent(model.username), "username");
        content.Add(new StringContent(model.password), "password");
        content.Add(new StringContent(model.fullname), "fullname");
        content.Add(new StringContent(model.email), "email");
        content.Add(new StringContent(model.phone), "phone");
        content.Add(new StringContent(model.address), "address");
        if (model.isActive == null)
        {
            content.Add(new StringContent("false"), "isActive");
        }
        else
        {
            content.Add(new StringContent(model.isActive.ToString()), "isActive");
        }

        var result = await _services.createDirector(content);
        if (result)
        {
            ToastService.ShowSuccess($"Director {model.fullname} has been created successfully!", "Success");
            NavigationManager.NavigateTo("/account");
        }
        else
        {
            ToastService.ShowError("An error has been occured in progress!", "Fail");
        }
    }
}
