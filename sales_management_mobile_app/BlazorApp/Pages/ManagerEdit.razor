@page "/editManager/{id}"
@attribute [Authorize]

@using BlazorApp.Models
@using BlazorApp.Services
@inject NavigationManager NavigationManager;
@inject IManagerServices _services;
@inject IToastService ToastService;

<h3>Edit Manager</h3>

<EditForm Model="@editManager" OnValidSubmit="@SubmitEdit">
    <DataAnnotationsValidator />
    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Id">Id: </label>
            <InputText class="form-control" @bind-Value="editManager.Id" readonly></InputText>
            <ValidationMessage For="()=>editManager.Id"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Username">Username <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="editManager.Username"></InputText>
            <ValidationMessage For="()=>editManager.Username"></ValidationMessage>
        </div>

    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Password">Password <span style="color:red">(*)</span> </label>
            <InputText class="form-control" type="password" @bind-Value="editManager.Password"></InputText>
            <ValidationMessage For="()=>editManager.Password"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputText class="form-control" @bind-Value="editManager.Fullname" hidden></InputText>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputText class="form-control" @bind-Value="editManager.Email" hidden></InputText>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputText class="form-control" @bind-Value="editManager.Phone" hidden></InputText>
        </div>
    </div>

    <div>
        <br />
    </div>

    <div class="row material">
         <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputText class="form-control" @bind-Value="editManager.Address" hidden></InputText>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputText class="form-control" @bind-Value="editManager.DirectorId" hidden></InputText>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputNumber class="form-control" @bind-Value="editManager.KpiValue" hidden></InputNumber>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputNumber class="form-control" @bind-Value="editManager.ActualKpi" hidden></InputNumber>
        </div>
    </div>


    <div>
        <br>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a href="/account" class="btn btn-primary">Cancel</a>
</EditForm>


@code {
    [Parameter]
    public string id { get; set; }

    private Manager editManager = new Manager();

    protected override async Task OnInitializedAsync()
    {
        var manager = await _services.getManager(id);
        editManager = new Manager();
        editManager.Id = manager.Id;
        editManager.Username = manager.Username;
        editManager.Password = manager.Password;
        editManager.Fullname = manager.Fullname;
        editManager.Email = manager.Email;
        editManager.Phone = manager.Phone;
        editManager.Address = manager.Address;
        editManager.DirectorId = manager.DirectorId;
        editManager.KpiValue = manager.KpiValue;
        editManager.ActualKpi = manager.ActualKpi;
    }

    private async Task SubmitEdit(EditContext context)
    {
        var result = await _services.updateManager(editManager);
        if (result)
        {
            ToastService.ShowSuccess($"Manager {editManager.Fullname} has been updated successfully!", "Success");
            NavigationManager.NavigateTo("/manager");
        }
        else
        {
            ToastService.ShowError("An error has been occured in progress!", "Fail");
        }
    }
}
