@page "/managerCreate"
@attribute [Authorize]
@using BlazorApp.Models
@using BlazorApp.Services
@using BlazorApp.Services.Request
@using System.IO
@inject NavigationManager NavigationManager;
@inject IManagerServices _services;
@inject IToastService ToastService;
@inject IDirectorServices _directorServices;
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReader;
<h3>Create Manager</h3>

<EditForm Model="@newManager" OnValidSubmit="@SubmitCreate" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Id">Id <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="newManager.id"></InputText>
            <ValidationMessage For="()=>newManager.id"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Username">Username <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="newManager.username"></InputText>
            <ValidationMessage For="()=>newManager.username"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Password">Password <span style="color:red">(*)</span> </label>
            <InputText class="form-control" type="password" @bind-Value="newManager.password"></InputText>
            <ValidationMessage For="()=>newManager.password"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="ConfirmPassword">Confirm Password <span style="color:red">(*)</span> </label>
            <InputText class="form-control" type="password" @bind-Value="newManager.ConfirmPassword"></InputText>
            <ValidationMessage For="()=>newManager.ConfirmPassword"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Fullname">Fullname <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="newManager.fullname"></InputText>
            <ValidationMessage For="()=>newManager.fullname"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Email">Email <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="newManager.email"></InputText>
            <ValidationMessage For="()=>newManager.email"></ValidationMessage>
        </div>
    </div>

    <div>
        <br />
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Phone">Phone <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="newManager.phone"></InputText>
            <ValidationMessage For="()=>newManager.phone"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Address">Address </label>
            <InputText class="form-control" @bind-Value="newManager.address"></InputText>
            <ValidationMessage For="()=>newManager.address"></ValidationMessage>
        </div>
    </div>

    <div>
        <br />
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Director Id">Director <span style="color:red">(*)</span> </label>
            <br />
            
            <select @bind="newManager.directorId" style="width:682px; height:35px">
                @if (directors != null)
                {
                        <option value=0 style="text-align:center">-- Select Director --</option>
                    @foreach (var dir in directors)
                    {
                        <option value="@dir.Id">@dir.Fullname</option>
                    }
                }
            </select>
            <ValidationMessage For="()=>newManager.directorId"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Avatar">Avatar <span style="color:red">(*)</span> </label>
            <br/>
            <input type="file" name="image" @ref="inputReference" @onchange="async() =>await OnInputFileChange()" />
            <ValidationMessage For="()=>newManager.file"></ValidationMessage>
        </div>
    </div>


    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="IsActive">Active</label><br />
            <input type="checkbox" unchecked @bind="newManager.isActive">
        </div>
    </div>

    <div>
        <br />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <a href="/account" class="btn btn-primary">Cancel</a>
</EditForm>

@code {
    private ManagerRequest newManager = new ManagerRequest();

    private List<Director> directors = new List<Director>();

    private Director searchDirector = new Director();

    ElementReference inputReference;

    string nameImage = string.Empty;

    Stream filestream = null;
    async Task OnInputFileChange()
    {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
        {
            return;
        }

        var fileInfo = await file.ReadFileInfoAsync();
        nameImage = fileInfo.Name;
        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            filestream = new MemoryStream(ms.ToArray());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        directors = await _directorServices.getDirectors(searchDirector);
    }

    private async Task SubmitCreate(EditContext context)
    {
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(filestream, (int)filestream.Length), "file", nameImage);
        content.Add(new StringContent(newManager.id), "id");
        content.Add(new StringContent(newManager.username), "username");
        content.Add(new StringContent(newManager.password), "password");
        content.Add(new StringContent(newManager.fullname), "fullname");
        content.Add(new StringContent(newManager.email), "email");
        content.Add(new StringContent(newManager.phone), "phone");
        content.Add(new StringContent(newManager.address), "address");
        content.Add(new StringContent(newManager.directorId), "directorId");
        if (newManager.isActive == null)
        {
            content.Add(new StringContent("false"), "isActive");
        }
        else
        {
            content.Add(new StringContent(newManager.isActive.ToString()), "isActive");
        }

        var result = await _services.createManager(content);
        if (result)
        {
            ToastService.ShowSuccess($"Manager {newManager.fullname} has been created successfully!", "Success");
            NavigationManager.NavigateTo("/account");
        }
        else
        {
            ToastService.ShowError("An error has been occured in progress!", "Fail");
        }
    }
}
