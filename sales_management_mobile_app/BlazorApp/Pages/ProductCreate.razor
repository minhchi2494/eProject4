@page "/productCreate"
@attribute [Authorize]
@using BlazorApp.Models
@using BlazorApp.Services
@using System.IO
@using BlazorApp.Services.Request
@using Tewr.Blazor.FileReader

@inject NavigationManager NavigationManager;
@inject IProductServices _services;
@inject IToastService ToastService;
@inject IFileReaderService fileReader;

<h3>Create Product</h3>

<EditForm Model="@newProduct" OnValidSubmit="@SubmitCreate" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Id">Id <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="newProduct.id"></InputText>
            <ValidationMessage For="()=>newProduct.id"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Name">Name <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="newProduct.name"></InputText>
            <ValidationMessage For="()=>newProduct.name"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Price">Price: </label>
            <InputNumber class="form-control" @bind-Value="newProduct.price"></InputNumber>
            <ValidationMessage For="()=>newProduct.price"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Description">Description </label>
            <InputText class="form-control" @bind-Value="newProduct.description"></InputText>
            <ValidationMessage For="()=>newProduct.description"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Images">Images <span style="color:red">(*)</span> </label>
            <input type="file" name="image" @ref="inputReference" @onchange="async() =>await OnInputFileChange()" />
            @*<InputFile OnChange="OnInputFileChange" @bind-Value="newProduct.File"></InputFile>*@
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="IsActive">Active</label>
            <input type="checkbox" unchecked @bind="newProduct.active">
            @*<small id="nameHelp" class="form-text text-muted">(Note: check to active your Product)</small>*@
        </div>
    </div>

    <div>
        <br>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <a href="/product" class="btn btn-primary">Cancel</a>
</EditForm>


@code {
    private ProductRequest newProduct = new ProductRequest();

    ElementReference inputReference;

    string nameImage = string.Empty;

    //string Message = "No image selected";
    //IReadOnlyList<IBrowserFile> selectedFiles;
    Stream filestream = null;
    async Task OnInputFileChange()
    {
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null) {
            return;
        }

        var fileInfo=await file.ReadFileInfoAsync();
        nameImage = fileInfo.Name;
        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
            filestream = new MemoryStream(ms.ToArray());
        }
        //selectedFiles = e.GetMultipleFiles();
        //nameImage = e.File.Name;
        //Message = $"{selectedFiles.Count} image selected";
        //this.StateHasChanged();
    }

    private async Task SubmitCreate(EditContext context)
    {
        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        content.Add(new StreamContent(filestream, (int)filestream.Length), "file", nameImage);
        content.Add(new StringContent(newProduct.id), "id");
        content.Add(new StringContent(newProduct.name), "name");
        content.Add(new StringContent(newProduct.description), "description");
        content.Add(new StringContent(newProduct.price.ToString()), "price");
        if (newProduct.active == null)
        {
            content.Add(new StringContent("false"), "active");
        } else
        {
            content.Add(new StringContent(newProduct.active.ToString()), "active");
        }


        var result = await _services.createProduct(content);
        if (result)
        {
            ToastService.ShowSuccess($"{newProduct.name} has been created successfully!", "Success");
            NavigationManager.NavigateTo("/product");
        }
        else
        {
            ToastService.ShowError("An error has been occured in progress!", "Fail");
        }
    }
}
