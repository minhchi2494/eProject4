@page "/userCreate"
@attribute [Authorize]
@using BlazorApp.Models
@using BlazorApp.Services
@inject NavigationManager NavigationManager;
@inject IUserServices _services;
@inject IToastService ToastService;

@inject IManagerServices _managerServices;
@inject IRoleServices _roleServices;
@inject ITargetServices _targetServices;

<h3>Create User</h3>

<EditForm Model="@model" OnValidSubmit="@SubmitCreate">
    <DataAnnotationsValidator />
    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Username">Username <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.Username"></InputText>
            <ValidationMessage For="()=>model.Username"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Password">Password <span style="color:red">(*)</span> </label>
            <InputText class="form-control" type="password" @bind-Value="model.Password"></InputText>
            <ValidationMessage For="()=>model.Password"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Fullname">Fullname <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.Fullname"></InputText>
            <ValidationMessage For="()=>model.Fullname"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Email">Email <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.Email"></InputText>
            <ValidationMessage For="()=>model.Email"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Phone">Phone <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.Phone"></InputText>
            <ValidationMessage For="()=>model.Phone"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Address">Address <span style="color:red">(*)</span> </label>
            <InputText class="form-control" @bind-Value="model.Address"></InputText>
            <ValidationMessage For="()=>model.Address"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="ManagerId">Manager <span style="color:red">(*)</span> </label>
            <br />
            @*<InputText class="form-control" @bind-Value="model.ManagerId"></InputText>*@
            
            <select @bind="model.ManagerId" style="width:682px; height:35px">
                @if (managers != null)
                {
                        <option value=0 style="text-align:center">-- Select manager --</option>
                    @foreach (var mag in managers)
                    {
                        <option value="@mag.Id">@mag.Fullname</option>
                    }
                }
            </select>
            <ValidationMessage For="()=>model.ManagerId"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="TargetId">Target No.</label>
            <select @bind="model.TargetId" style="width:682px; height:35px">
                @if (targets != null)
                {
                        <option value=0 style="text-align:center">-- Select Target Number --</option>
                    @foreach (var targs in targets)
                    {
                        <option value="@targs.Id">@targs.Id</option>
                    }
                }
            </select>
            <ValidationMessage For="()=>model.RoleId"></ValidationMessage>
        </div>

@*        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="RoleId">Role <span style="color:red">(*)</span> </label>
            <select @bind="model.RoleId" style="width:682px; height:35px">
                @if (roles != null)
                {
                        <option value=0 style="text-align:center">-- Select roles --</option>
                    @foreach (var role in roles)
                    {
                        <option value="@role.Id">@role.Title</option>
                    }
                }
            </select>
            <ValidationMessage For="()=>model.RoleId"></ValidationMessage>
        </div>*@
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="IsActive">Active</label>
            <input type="checkbox" unchecked @bind="model.IsActive">
            <small id="nameHelp" class="form-text text-muted">(Note: check to active your User)</small>
        </div>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <InputNumber class="form-control" @bind-Value="model.RoleId" hidden></InputNumber>
            <ValidationMessage For="()=>model.RoleId"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <a href="/manager" class="btn btn-primary">Cancel</a>
</EditForm>

@code {
    private List<Manager> managers = new List<Manager>();

    private Manager searchManager = new Manager();

    private List<Role> roles = new List<Role>();

    private Role searchRole = new Role();

    private User model = new User();

    private List<Target> targets = new List<Target>();

    private FromToDate ftd = new FromToDate();

    protected override async Task OnInitializedAsync()
    {
        managers = await _managerServices.getManagers(searchManager);
        roles = await _roleServices.getRoles(searchRole);
        targets = await _targetServices.getTargets(ftd.FromDate, ftd.ToDate);
    }

    private async Task SubmitCreate(EditContext context)
    {
        var result = await _services.createUser(model);
        if (result)
        {
            ToastService.ShowSuccess($"User {model.Fullname} has been created successfully!", "Success");
            NavigationManager.NavigateTo("/manager");
        }
        else
        {
            ToastService.ShowError("An error has been occured in progress!", "Fail");
        }
    }
}
