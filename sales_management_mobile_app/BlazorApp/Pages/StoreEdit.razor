@page "/editStore/{id}"
@attribute [Authorize]
@using BlazorApp.Models
@using BlazorApp.Services
@inject NavigationManager NavigationManager;
@inject IStoreServices _services;
@inject IToastService ToastService;

<h3>Edit Store</h3>

@if (editStore == null)
{
    <div>Loading</div>
}

<EditForm Model="@editStore" OnValidSubmit="@SubmitEdit">
    <DataAnnotationsValidator />
    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Id">Id: </label>
            <input class="form-control" value="@editStore.Id" readonly />
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Name">Name: </label>
            <InputText class="form-control" @bind-Value="editStore.Name"></InputText>
            <ValidationMessage For="()=>editStore.Name"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Email">Email: </label>
            <InputText class="form-control" @bind-Value="editStore.Email"></InputText>
            <ValidationMessage For="()=>editStore.Email"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            <label for="Phone">Phone: </label>
            <InputText class="form-control" @bind-Value="editStore.Phone"></InputText>
            <ValidationMessage For="()=>editStore.Phone"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            @*<label for="Address">Address: </label>*@
            <InputText class="form-control" @bind-Value="editStore.Address" hidden></InputText>
            <ValidationMessage For="()=>editStore.Address"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            @*<label for="Longitude">Longitude: </label>*@
            <InputNumber class="form-control" @bind-Value="editStore.Longitude" hidden></InputNumber>
            <ValidationMessage For="()=>editStore.Longitude"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            @*<label for="Latitude">Latitude: </label>*@
            <InputNumber class="form-control" @bind-Value="editStore.Latitude" hidden></InputNumber>
            <ValidationMessage For="()=>editStore.Latitude"></ValidationMessage>
        </div>

        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            @*<label for="Latitude">Latitude: </label>*@
            <InputNumber class="form-control" @bind-Value="editStore.UserId" hidden></InputNumber>
            <ValidationMessage For="()=>editStore.UserId"></ValidationMessage>
        </div>
    </div>

    <div>
        <br>
    </div>

    <div class="row material">
        <div class="col-xs-6 col-sm-6 col-lg-6 col-md -6">
            @*<label for="IsActive">IsActive</label>*@
            <input type="checkbox" unchecked @bind="editStore.IsActive" hidden>
            @*<small id="nameHelp" class="form-text text-muted">(Note: Uncheck will deactive your Location)</small>*@
        </div>
    </div>

    <div>
        <br>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a href="/store" class="btn btn-primary">Cancel</a>
</EditForm>

@code {
    [Parameter]
    public string id { get; set; }

    private Store editStore = new Store();

    protected override async Task OnInitializedAsync()
    {
        var store = await _services.getStore(id);
        editStore = new Store();
        editStore.Id = store.Id;
        editStore.Name = store.Name;
        editStore.Email = store.Email;
        editStore.Phone = store.Phone;
        editStore.Address = store.Address;
        editStore.Longitude = store.Longitude;
        editStore.Latitude = store.Latitude;
        editStore.UserId = store.UserId;
        editStore.IsActive = store.IsActive;
    }

    private async Task SubmitEdit(EditContext context)
    {
        var result = await _services.updateStore(editStore);
        if (result)
        {
            ToastService.ShowSuccess($"{editStore.Name} has been updated successfully!", "Success");
            NavigationManager.NavigateTo("/store");
        }
        else
        {
            ToastService.ShowError("An error has been occured in progress!", "Fail");
        }
    }
}
